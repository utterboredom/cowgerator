{"version":3,"sources":["components/CowSVG/index.tsx","cowgorithms/color.ts","components/CattleViz/index.tsx","App.tsx","serviceWorker.ts","index.tsx","redux/reducers.ts","redux/constants.ts"],"names":["CowSVG","props","color","className","width","height","fill-rule","fill","d","combineColors","color1","color2","c1","replace","match","c2","combined","map","c","i","val","Math","round","parseInt","toString","length","reduce","accum","curr","connect","state","cattle","icon","faPlus","faEquals","App","Boolean","window","location","hostname","reducers","combineReducers","modifier","action","type","value","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","cow","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAkBeA,G,MAZA,SAACC,GAAuB,IAC3BC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,UACX,OACI,yBAAKA,UAAWA,EAChBC,MAAM,MAAMC,OAAO,OACpB,0BAAMC,YAAU,UAAWC,KAAML,EAChCM,EAAE,m3ECZDC,EAAgB,SAACC,EAAeC,GACzC,IAAIC,EAAmBF,EAAOG,QAAQ,IAAK,IAAIC,MAAM,YAAc,CAAC,KAAK,KAAK,MAC1EC,EAAmBJ,EAAOE,QAAQ,IAAK,IAAIC,MAAM,YAAc,CAAC,KAAK,KAAK,MAExEE,EAAWJ,EAChBK,KAAI,SAACC,EAAGC,GACL,IAAMC,EAAOC,KAAKC,OAAOC,SAASL,EAAG,IAAMK,SAASR,EAAGI,GAAI,KAAK,GAAIK,SAAS,IAC7E,OAAmB,GAAZJ,EAAIK,OAAYL,EAAMA,EAAI,OAEpCM,QAAO,SAACC,EAAcC,GAAf,OAA+BD,EAAMC,KAC7C,MAAM,IAAN,OAAWZ,I,gBCkCEa,mBARjB,SAAyBC,GAAY,IACzBC,EAAWD,EAAXC,OACR,MAAO,CACHrB,OAAQqB,EAAOrB,QAAU,SACzBC,OAAQoB,EAAOpB,QAAU,YAIhBkB,EA/BC,SAAC5B,GAA2B,IAClCS,EAAmBT,EAAnBS,OAAQC,EAAWV,EAAXU,OAChB,OACI,yBAAKR,UAAU,aACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAAQD,MAAOQ,KAEnB,yBAAKP,UAAU,QACX,kBAAC,IAAD,CAAiB6B,KAAMC,OAE3B,yBAAK9B,UAAU,YACX,kBAAC,EAAD,CAAQD,MAAOS,KAEnB,yBAAKR,UAAU,QACX,kBAAC,IAAD,CAAiB6B,KAAME,OAE1B,yBAAK/B,UAAU,YACZ,kBAAC,EAAD,CAASD,MAAOO,EAAcC,EAAQC,UClBvCwB,G,MARO,WACpB,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,SCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2D,YCAN,IAAM0B,EAAWC,0BAAgB,CAC/BV,OCZK,WAOJ,IANCD,EAMF,uDANU,CACJpB,OAAQ,UACRC,OAAQ,UACR+B,SAAU,IAEdC,EACF,uCACE,OAAQA,EAAOC,MACX,IChB0B,qBDiBtB,OAAO,eACAd,EADP,CAEIpB,OAAQiC,EAAOE,MAAMnC,OACrBC,OAAQgC,EAAOE,MAAMlC,OACrB+B,SAAUC,EAAOE,MAAMH,WAG/B,QACI,OAAOZ,MDJbgB,EAAQC,sBACVP,EACAQ,8BAAoBC,0BAAgBC,OAGxCb,OAAOc,IAAMd,OAAOc,KAAO,GAC3Bd,OAAOc,IAAIL,MAAQA,EAEnBM,IAASC,OAAO,kBAAC,IAAD,CAAUP,MAAOA,GAAO,kBAAC,EAAD,OAAoBQ,SAASC,eAAe,cD8G9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5315414e.chunk.js","sourcesContent":["import React from 'react';\r\ninterface CowSVGProps {\r\n    color?: string\r\n    className?:string\r\n}\r\n\r\nconst CowSVG = (props:CowSVGProps) => {\r\n    const { color, className} = props;\r\n        return (\r\n            <svg className={className}\r\n            width=\"600\" height=\"350\">\r\n           <path fill-rule=\"evenodd\"  fill={color}\r\n            d=\"M241.970,171.897 C243.781,171.733 254.809,170.909 254.809,170.909 L265.673,179.801 L297.277,185.728 L324.931,188.692 L352.585,191.656 L386.164,182.764 L406.905,177.825 L426.657,188.692 L442.459,201.535 L446.410,214.378 L449.373,241.051 L439.496,265.749 L422.707,292.423 L414.806,306.254 L410.855,327.000 L437.521,325.024 L436.534,303.290 L462.212,267.725 L482.952,245.991 L489.866,215.366 L489.866,190.668 L496.779,178.813 L513.569,207.462 L524.433,232.160 L533.322,253.894 L531.346,269.701 L532.334,288.471 L527.396,307.242 L528.383,321.073 L559.000,320.085 C559.000,320.085 554.226,309.382 554.062,306.254 C553.897,303.125 553.074,285.508 553.074,285.508 L551.099,274.640 L548.136,202.523 L550.111,174.861 L549.124,158.066 L547.148,126.453 L546.161,74.094 L547.148,42.480 L538.260,17.782 L521.470,3.952 L496.779,1.976 L479.989,4.940 L467.150,0.988 L433.571,5.927 L400.979,5.927 L382.214,7.903 L354.560,3.952 L339.746,7.903 L285.426,0.000 L260.735,1.976 L250.859,0.988 L238.019,1.976 L208.390,0.988 L184.687,1.976 L154.071,12.843 L123.454,24.698 C123.454,24.698 110.450,25.850 109.627,25.686 C108.804,25.521 104.689,32.601 104.689,32.601 L95.800,29.637 L81.973,30.625 L69.134,29.637 C69.134,29.637 49.217,11.361 50.369,11.855 C51.521,12.349 38.518,22.722 38.518,22.722 L38.518,32.601 L33.580,34.577 L23.703,33.589 L17.777,44.456 L22.716,56.311 L20.740,76.069 L14.814,96.816 L8.889,105.707 L0.000,119.538 L5.926,132.381 L17.777,143.248 L23.703,139.296 L34.567,131.393 L42.468,128.429 L67.159,124.477 L81.973,112.622 L87.899,114.598 L112.590,135.344 L121.479,154.115 L126.417,168.934 L139.256,182.764 L145.182,193.631 L175.799,193.631 L179.749,202.523 L179.749,225.245 L180.737,245.003 L183.700,258.834 L180.737,269.701 L178.761,276.616 L174.811,286.495 L171.848,300.326 L165.922,325.024 L178.761,324.036 L194.564,325.024 L190.613,310.205 L184.687,300.326 L193.576,269.701 L197.527,264.761 L198.514,248.955 L201.477,245.003 L203.452,216.353 L209.378,216.353 L216.292,251.918 L223.205,259.822 L218.267,293.411 L213.329,307.242 L213.329,314.157 L211.353,326.012 L237.032,327.000 L235.057,309.218 L238.019,297.363 L239.007,281.556 L235.057,259.822 L238.019,228.208 L239.007,187.704 C239.007,187.704 240.159,172.062 241.970,171.897 ZM531.346,63.227 L541.223,70.142 L541.223,121.514 L542.210,163.994 L536.284,164.982 L533.322,154.115 L525.420,144.236 L529.371,123.489 L528.383,77.057 L533.322,70.142 L531.346,63.227 Z\"/>\r\n           </svg>\r\n        );\r\n    \r\n}\r\n\r\nexport default CowSVG;\r\n\r\n\r\n\r\n\r\n\r\n","export const combineColors = (color1:string, color2:string):string => {\n    let c1:Array<string> = color1.replace(\"#\", '').match(/.{1,2}/g) || [\"00\",\"00\",\"00\"];\n    let c2:Array<string> = color2.replace(\"#\", '').match(/.{1,2}/g) || [\"00\",\"00\",\"00\"];\n\n    const combined = c1\n    .map((c, i) => { \n        const val = (Math.round((parseInt(c, 16) + parseInt(c2[i], 16))/2)).toString(16);\n        return val.length==2 ? val : val+\"0\";\n    })\n    .reduce((accum:string, curr:string) => accum+curr);\n    return `#${combined}`\n\n}","import React from 'react';\nimport CowSVG from '../CowSVG';\nimport {connect} from 'react-redux';\nimport {combineColors} from '../../cowgorithms/color';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faEquals } from '@fortawesome/free-solid-svg-icons'\n\ninterface CattleVizProps {\n    color1: string;\n    color2: string;\n}\n\n\nconst CattleViz = (props: CattleVizProps) => {\n    const { color1, color2 } = props;\n    return (\n        <div className=\"cattleViz\">\n            <div className=\"card cow\">\n                <CowSVG color={color1} />\n            </div>\n            <div className=\"card\">\n                <FontAwesomeIcon icon={faPlus} />\n            </div>\n            <div className=\"card cow\">\n                <CowSVG color={color2} />\n            </div>\n            <div className=\"card\">\n                <FontAwesomeIcon icon={faEquals} />\n            </div>\n             <div className=\"card cow\">\n                <CowSVG  color={combineColors(color1, color2)} />\n            </div>\n        </div>\n    );\n}\n\nfunction mapStateToProps(state:any) {\n    const { cattle } = state;\n    return { \n        color1: cattle.color1 || \"ffffff\",\n        color2: cattle.color2 || \"ffffff\"\n    }\n  }\n  \n  export default connect(mapStateToProps)(CattleViz)","import React from 'react';\nimport CattleViz from './components/CattleViz'\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CattleViz/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {cattle} from './redux/reducers';\n\n\ndeclare global {\n    interface Window {\n        cow: any;\n    }\n}\n\nconst reducers = combineReducers({\n  cattle\n});\nconst store = createStore(\n    reducers,\n    composeWithDevTools(applyMiddleware(ReduxThunk))\n);\n\nwindow.cow = window.cow || {};\nwindow.cow.store = store;\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('react-cow'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ADD_CATTLE_REQUEST } from './constants';\n\ninterface Action {\n    type: string;\n    value: any;\n}\n\nexport function cattle(\n    state = {\n        color1: \"#000000\",\n        color2: \"#000000\",\n        modifier: \"\"\n    },\n    action: Action\n) {\n    switch (action.type) {\n        case ADD_CATTLE_REQUEST:\n            return {\n                ...state,\n                color1: action.value.color1,\n                color2: action.value.color2,\n                modifier: action.value.modifier\n            };\n\n        default:\n            return state;\n    }\n}","export const ADD_CATTLE_REQUEST = 'ADD_CATTLE_REQUEST';"],"sourceRoot":""}